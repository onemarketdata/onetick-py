
[MakePRL]
COMMENT = 
CPU_NUMBER = 1
DB_HINT_FOR_PROCESSING_HOST = 
graph_reuse = 0
one_to_many_symbol_mapping = 0
PARAMETER = SHOW_FULL_DETAIL false
PARAMETER_VALID_IF_EMPTY = NUM_LEVELS 5
QUERY_BATCH_SIZE = 0
ROOT = NESTED_OTQ ___ME___::ob_flat
ROOT_EP_PARAMETERS_FLAG = -2
ROOT_MINIMIZED = 1
ROOT_NESTED_INPUT = IN IN1
ROOT_NESTED_OUTPUT = OUT OUT2
ROOT_PARAMETER = SHOW_FULL_DETAIL $SHOW_FULL_DETAIL
ROOT_PARAMETER_VALID_IF_EMPTY = NUM_LEVELS $NUM_LEVELS
ROOT_X = 498
ROOT_Y = 262
SECURITY = eval(remote://COMMON::common_utils/Utils.otq::GetSymbols,DB=$OrderDB,PAT=$PAT) 0 No
SECURITY = S_ORDERS_M2::EUSA 0
SECURITY = S_ORDERS_M2::RBZ 0 No
SHOW_TEMPLATE = 
TYPE = GRAPH

[ob]
COMMENT = 
CPU_NUMBER = 1
DB_HINT_FOR_PROCESSING_HOST = 
graph_reuse = 0
NODE_112 = NESTED_OTQ ___ME___::_prepare_orders
NODE_112_EP_PARAMETERS_FLAG = -2
NODE_112_MINIMIZED = 1
NODE_112_NESTED_INPUT = IN IN
NODE_112_X = 660
NODE_112_Y = 234
NODE_114 = OB_SNAPSHOT(IS_RUNNING_AGGR=true,SIDE="$SIDE",MAX_LEVELS="$NUM_LEVELS",SHOW_FULL_DETAIL="$SHOW_FULL_DETAIL",MAX_INITIALIZATION_DAYS=0)
NODE_114_EP_PARAMETERS_FLAG = -2
NODE_114_SOURCE =  NODE_112..ROOT
NODE_114_SOURCE_DESCRIPTION = NODE_112..ROOT .OUT
NODE_114_X = 684
NODE_114_Y = 462
one_to_many_symbol_mapping = 0
PARAMETER = SHOW_FULL_DETAIL false
PARAMETER = SIDE 
PARAMETER_VALID_IF_EMPTY = NUM_LEVELS 1
QUERY_BATCH_SIZE = 0
ROOT = PASSTHROUGH
ROOT_COMMENTED_OUT = 1
ROOT_EP_PARAMETERS_FLAG = -2
ROOT_NESTED_OUTPUT =  OUT
ROOT_SOURCE =  NODE_114
ROOT_X = 686
ROOT_Y = 672
SECURITY = eval(remote://COMMON::common_utils/Utils.otq::GetSymbols,DB=$OrderDB,PAT=$PAT) 0 No
SECURITY = S_ORDERS_M2::EUSA 0
SECURITY = S_ORDERS_M2::RBZ 0 No
SHOW_TEMPLATE = 
TYPE = GRAPH

[ob_flat]
COMMENT = 
CPU_NUMBER = 1
DB_HINT_FOR_PROCESSING_HOST = 
graph_reuse = 0
NODE_110 = ADD_FIELD(FIELD=__NEXT_TS__,VALUE="TIMESTAMP[+1]")
NODE_110_EP_PARAMETERS_FLAG = -2
NODE_110_SOURCE =  NODE_88
NODE_110_X = 690
NODE_110_Y = 740
NODE_111 = WHERE_CLAUSE(WHERE="TIMESTAMP != __NEXT_TS__")
NODE_111_EP_PARAMETERS_FLAG = -2
NODE_111_SOURCE =  NODE_110
NODE_111_X = 690
NODE_111_Y = 930
NODE_112 = NESTED_OTQ ___ME___::_prepare_orders
NODE_112_EP_PARAMETERS_FLAG = -2
NODE_112_MINIMIZED = 1
NODE_112_NESTED_INPUT = IN IN
NODE_112_X = 664
NODE_112_Y = 250
NODE_88 = OB_SNAPSHOT_FLAT(IS_RUNNING_AGGR=true,MAX_LEVELS="$NUM_LEVELS",SHOW_FULL_DETAIL="$SHOW_FULL_DETAIL",MAX_INITIALIZATION_DAYS=0)
NODE_88_EP_PARAMETERS_FLAG = 0
NODE_88_NAME = OB
NODE_88_SOURCE =  NODE_112..ROOT
NODE_88_SOURCE_DESCRIPTION = NODE_112..ROOT .OUT
NODE_88_X = 688
NODE_88_Y = 508
one_to_many_symbol_mapping = 0
PARAMETER = SHOW_FULL_DETAIL false
PARAMETER_VALID_IF_EMPTY = NUM_LEVELS 5
QUERY_BATCH_SIZE = 0
ROOT = PASSTHROUGH(FIELDS=__NEXT_TS__,DROP_FIELDS=true)
ROOT_EP_PARAMETERS_FLAG = 0
ROOT_NESTED_OUTPUT =  OUT
ROOT_SOURCE =  NODE_111..IF
ROOT_X = 598
ROOT_Y = 1140
SECURITY = eval(remote://COMMON::common_utils/Utils.otq::GetSymbols,DB=$OrderDB,PAT=$PAT) 0 No
SECURITY = S_ORDERS_M2::EUSA 0
SECURITY = S_ORDERS_M2::RBZ 0 No
SHOW_TEMPLATE = 
TYPE = GRAPH

[_prepare_orders]
COMMENT = 
CPU_NUMBER = 1
DB_HINT_FOR_PROCESSING_HOST = 
graph_reuse = 0
NODE_100 = MODIFY_TS_PROPERTIES(PROPERTY_VALUE=ID)
NODE_100_COMMENT = Add keys for PRLs so we can do order book stuff
NODE_100_EP_PARAMETERS_FLAG = 0
NODE_100_SOURCE =  NODE_101
NODE_100_X = 1092
NODE_100_Y = 1338
NODE_101 = DECLARE_STATE_VARIABLES(SCOPE=ALL_OUTPUTS,VARIABLES="TICK_SET(LATEST_TICK,ID) FIRSTNEW")
NODE_101_COMMENT = According to OT orders schema, now we split replaces to different orders, so will be enough to keep a price of a new message in all messages for that order. So, if we will have fills with more relevant price than it goes to the market, we will see a price it goes to market with. e.g:\
time1 N 100$ 10 BUY\
time2 PF 98$ 5 BUY\
time3 F 99$ 5 BUY\
for that case at all stages we will get price level for 100$, only size will be change (from 10 to 5 to 0)
NODE_101_EP_PARAMETERS_FLAG = 0
NODE_101_SOURCE =  NODE_109
NODE_101_X = 1090
NODE_101_Y = 1082
NODE_104 = INSERT_TICK(FIELDS="STATE='C', ID=tostring(PREVIOUS_PUB_ORDER_ID)",WHERE="STATE='REP' and KEEP_STANDING_FLAG!='Y'")
NODE_104_EP_PARAMETERS_FLAG = -2
NODE_104_SOURCE =  NODE_105..IF
NODE_104_X = 1090
NODE_104_Y = 570
NODE_105 = WHERE_CLAUSE(WHERE="STATE='N' or STATE='REP' or STATE='PF' or STATE='F' or STATE='C'")
NODE_105_EP_PARAMETERS_FLAG = -2
NODE_105_SOURCE =  NODE_106
NODE_105_X = 1096
NODE_105_Y = 426
NODE_106 = PASSTHROUGH(FIELDS="EVENT_TYPE,\
STATE, \
BUY_FLAG, \
PRICE, \
QTY, \
QTY_FILLED, \
ID,\
KEEP_STANDING_FLAG, \
PREVIOUS_PUB_ORDER_ID, \
PUB_ORDER_ID_PARENT_ORDER")
NODE_106_COMMENTED_OUT = 1
NODE_106_EP_PARAMETERS_FLAG = 0
NODE_106_NAME = P
NODE_106_NESTED_INPUT =  IN
NODE_106_X = 1094
NODE_106_Y = 204
NODE_109 = UPDATE_FIELD(FIELD=STATE,VALUE="'N'",WHERE="STATE='REP' and KEEP_STANDING_FLAG!='Y'")
NODE_109_EP_PARAMETERS_FLAG = -2
NODE_109_SOURCE =  NODE_104
NODE_109_X = 1090
NODE_109_Y = 780
NODE_90 = ADD_FIELDS(FIELDS="BUY_SELL_FLAG int=1-BUY_FLAG,\
RECORD_TYPE=\"R\",\
TICK_STATUS int=0,\
DELETED_TIME long=0,\
REMOVED int=0")
NODE_90_COMMENT = Add all the extra bits required for a PRL\
REMOVED is needed for next EP
NODE_90_EP_PARAMETERS_FLAG = 0
NODE_90_SOURCE =  NODE_91
NODE_90_X = 1098
NODE_90_Y = 2446
NODE_91 = UPDATE_TICK_SETS(TICK_SETS="STATE::FIRSTNEW")
NODE_91_COMMENT = Update the tick set showing oroginal price. Don't need a WHERE as th eupdate policy is OLDEST_TICK\
Because of previous EP, PRICE will be stable for each order and equals first "new" message. So it is needed for SUM_FILLED calculation mostly.
NODE_91_EP_PARAMETERS_FLAG = 0
NODE_91_SOURCE =  NODE_92
NODE_91_X = 1100
NODE_91_Y = 2264
NODE_92 = UPDATE_FIELDS(SET="PRICE=FIRSTNEW_PRICE")
NODE_92_EP_PARAMETERS_FLAG = 0
NODE_92_SOURCE =  NODE_93
NODE_92_X = 1102
NODE_92_Y = 2100
NODE_93 = UPDATE_FIELDS(SET="SIZE=0",WHERE="STATE=\"C\" or STATE=\"F\" or STATE=\"REJ\" or STATE=\"EXPIRED\"")
NODE_93_COMMENT = Needed for PRL (removing tick from book)
NODE_93_EP_PARAMETERS_FLAG = 0
NODE_93_SOURCE =  NODE_94
NODE_93_X = 1100
NODE_93_Y = 1940
NODE_94 = UPDATE_FIELDS(SET="FIRSTNEW_PRICE=PRICE",WHERE="FIRSTNEW_PRICE=0")
NODE_94_COMMENT = In case no ticks in tick set (it should occurs if it is a "new" message, or maybe something more complicated), we make FIRSTNEW_PRICE equals PRICE of order by default.
NODE_94_EP_PARAMETERS_FLAG = 0
NODE_94_SOURCE =  NODE_95
NODE_94_X = 1098
NODE_94_Y = 1750
NODE_95 = ADD_FIELDS(FIELDS="SIZE=LEAVESQTY,\
FIRSTNEW_PRICE double =find(STATE::FIRSTNEW,\"PRICE\",0.00)")
NODE_95_COMMENT = Here we calculate size of a price level, and get a price from "new" message
NODE_95_EP_PARAMETERS_FLAG = 0
NODE_95_SOURCE =  NODE_100
NODE_95_X = 1098
NODE_95_Y = 1540
one_to_many_symbol_mapping = 0
QUERY_BATCH_SIZE = 0
ROOT = UPDATE_FIELD(FIELD=REMOVED,VALUE="erase_from_tick_set(STATE::FIRSTNEW)",WHERE="STATE=\"C\" or STATE=\"F\" or SIZE=0")
ROOT_COMMENT = We just clean tick_set and field REMOVED one can use for monitoring correctness of this algorithm
ROOT_EP_PARAMETERS_FLAG = 0
ROOT_NAME = U
ROOT_NESTED_OUTPUT =  OUT
ROOT_SOURCE =  NODE_90
ROOT_X = 1100
ROOT_Y = 2680
SECURITY = eval(remote://COMMON::common_utils/Utils.otq::GetSymbols,DB=$OrderDB,PAT=$PAT) 0 No
SECURITY = S_ORDERS_M2::EUSA 0
SECURITY = S_ORDERS_M2::RBZ 0 No
SHOW_TEMPLATE = 
TYPE = GRAPH

[_meta]
app_version = OneTick Display Build tag: BUILD_update1_20191112120000 Build timestamp : 20191112120000
ApplyTimesDaily = 0
end = 20190412195000000
file_version = 1.0
RunningQuery = 0
start = 20190412000000000
SYMBOL_DATE = 
TZ = EST5EDT
USER_NAME = Andrew
